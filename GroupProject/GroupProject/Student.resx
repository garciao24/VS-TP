<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>